Question 1:

-oo ---------------------------------------------------> 80 --> +oo
                                                          |
-oo -----------------------> 40 -----------------------> 80 --> +oo
                              |                           |
-oo ---------> 20 ---------> 40 ---------> 60 ---------> 80 --> +oo
                |             |             |             |
-oo --> 10 --> 20 --> 30 --> 40 --> 50 --> 60 --> 70 --> 80 --> +oo

Question 2:

a b c d
if a > b swap(a,b)
if c > d swap(c,d)
if a > c temp1 = c => a largest
if b > d temp2 = b => d smallest
if temp1 > temp2 => sorted array: d -> b -> c -> a

Every comparison-based sorting algorithm has at least one worst case which running time Î©(n*log(n)).

n = 4 => n*log(n) = 8 > 5 => It does not violate the theoretical lower bound.

Question 3:
1. Sort input array
2. Create an array with the same length of input array
2. Using two pointers approach:
    start pointer start from beginning
    end pointer start from end of the array
3. Traversing through the array
    Fill even index from the start pointer (lower values)
    Fill odd index from the end pointer (higher values)
4. Copy the rearranged elements back into the original array
5. Return input array