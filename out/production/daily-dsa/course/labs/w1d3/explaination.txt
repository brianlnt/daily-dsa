Question 1:
    beautiful(A,n)
        total <- 0
        for i <- 0 to n - 1
            total <- total + A[i]
        return total

- Best-case scenario: The array is filled with any numbers (even zeros), but since we are summing the elements,
we still need to visit each element. Thus, the best case still takes O(n).
- Worst-case scenario: Similarly, the worst case also takes O(n), because we always have to sum all elements of
the array, no matter what.

Question 2:
    2^n < 2^(n + 1) < 2^(2n) < 2^( 2^n )

Question 3:
O(1): Accessing an element in an array by index.
O(log n): binary search
O(n): linear search
O(n log n): merge sort, heap sort, tim sort
O(n^2): quick sort, bubble sort, selection sort, insertion sort
O(n^3): 3-Sum
O(2^n): subset sum

Question 4:
The Master Theorem only applies to divide-and-conquer recurrences. However, this Fibonacci recurrence doesn't
split the problem size by a constant factor (such as dividing n by 2 or 3)